import exploitpaddingoracle

import os
from Crypto.Util.Padding import pad, unpad
from Crypto.Cipher import AES


class LocalExamplePaddingOracle(metaclass=exploitpaddingoracle.PaddingOracle):
    def __init__(self, plaintext: str):
        self.plaintext: str = plaintext
        self.key = os.urandom(16)
        self.iv = os.urandom(16)
        self.encryption_cipher = AES.new(self.key, AES.MODE_CBC, iv=self.iv)
        self.decryption_cipher = AES.new(self.key, AES.MODE_CBC, iv=self.iv)
        self.ciphertext: str = self.encryption_cipher.encrypt(pad(bytes(self.plaintext, 'ascii'), AES.block_size)).hex()


    def query(self, q: str) -> bool: # returns true if padding is correct
        decrypted_query = self.decryption_cipher.decrypt(bytes.fromhex(q))
        try:
            unpad(decrypted_query, AES.block_size)
        except ValueError as e: # unpad() raises ValueError if pad is incorrect
            return False
        return True
    

exampleOracle = LocalExamplePaddingOracle("The Magic Words are Squeamish Ossifrage")
ciphertext_with_iv = exampleOracle.iv.hex() + exampleOracle.ciphertext
attacker = exploitpaddingoracle.Attacker(exampleOracle, ciphertext_with_iv, 16)
plaintext = attacker.attack()
print(plaintext)
        
    

